{"ast":null,"code":"import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token) {\n  return http.post(\"/getuser/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token) {\n  return http.post(\"/getsystemusers/\", {\n    token\n  }).then(response => {\n    // let userTimeAction = function(data) {\n    //     let aux = [];\n    //     const teste2 = async (user) => {\n    //         const teste = async (user) => {\n    //             return new Promise(resolve => {\n    //                 useraccess(token, user.userId)\n    //                 .then(userData => {\n    //                     if(userData){\n    //                         // let time = DataParse.parseDate(userData[0].date)\n    //                         // if(time){\n    //                         //     aux.push({\n    //                         //         ...user,\n    //                         //         lastTimeOnline: time.day + \" às \" + time.hour,\n    //                         //         lastAction: userData[0].jobType,\n    //                         //     })\n    //                         // }\n    //                         console.log(userData);\n    //                         resolve();\n    //                     }\n    //                 })\n    //                 .catch(error => console.log(error));\n    //                 })\n    //         }\n    //         await teste(user);\n    //     }\n    //     // data.forEach(user => {\n    //     //     teste2(user)\n    //     // })\n    //     return aux;\n    // }\n    // if(response.data){\n    //     let data = response.data;\n    //     console.log(data);\n    //     let aux = [];\n    //     //aux = userTimeAction(data);\n    //     return response.data;\n    // }\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token) {\n  // eslint-disable-next-line \n  return http.post(\"/getloggedusers/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id) {\n  return http.post(\"/getsystemlogsbyuserid/\", {\n    token,\n    id\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\nconst endpoint = {\n  systemusers,\n  systemlogs,\n  useraccess,\n  infouser\n};\nexport default endpoint;","map":{"version":3,"names":["http","DataParse","infouser","token","post","then","response","data","catch","error","console","log","systemusers","systemlogs","useraccess","id","endpoint"],"sources":["/home/lapti/ambiente-monitoramento-servicos/src/endpoint/SystemUsers.jsx"],"sourcesContent":["import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token){\n    return http\n        .post(\"/getuser/\", {token})\n        .then(response => {return response.data})\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token){\n    return http\n        .post(\"/getsystemusers/\", {\n            token,\n        })\n        .then(response => {\n            // let userTimeAction = function(data) {\n            //     let aux = [];\n            //     const teste2 = async (user) => {\n            //         const teste = async (user) => {\n            //             return new Promise(resolve => {\n            //                 useraccess(token, user.userId)\n            //                 .then(userData => {\n            //                     if(userData){\n            //                         // let time = DataParse.parseDate(userData[0].date)\n            //                         // if(time){\n            //                         //     aux.push({\n            //                         //         ...user,\n            //                         //         lastTimeOnline: time.day + \" às \" + time.hour,\n            //                         //         lastAction: userData[0].jobType,\n            //                         //     })\n            //                         // }\n            //                         console.log(userData);\n            //                         resolve();\n            //                     }\n            //                 })\n            //                 .catch(error => console.log(error));\n            //                 })\n            //         }\n            //         await teste(user);\n            //     }\n            //     // data.forEach(user => {\n            //     //     teste2(user)\n            //     // })\n            //     return aux;\n            // }\n            // if(response.data){\n            //     let data = response.data;\n            //     console.log(data);\n            //     let aux = [];\n            //     //aux = userTimeAction(data);\n            //     return response.data;\n            // }\n            return response.data;\n\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token){\n    // eslint-disable-next-line \n    return http.\n        post(\"/getloggedusers/\", {\n            token,\n        })\n        .then(response => {\n            return response.data;\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id){\n    return http.post(\"/getsystemlogsbyuserid/\", {\n        token,\n        id,\n    })\n    .then(response => {return response.data})\n    .catch(error => console.log(error))\n}\n\nconst endpoint = {\n    systemusers,\n    systemlogs,\n    useraccess,\n    infouser,\n};\n\nexport default endpoint;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,eAAe;AAChC,OAAOC,SAAS,MAAM,sBAAsB;;AAE5C;AACA,SAASC,QAAQ,CAACC,KAAK,EAAC;EACpB,OAAOH,IAAI,CACNI,IAAI,CAAC,WAAW,EAAE;IAACD;EAAK,CAAC,CAAC,CAC1BE,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASG,WAAW,CAACT,KAAK,EAAC;EACvB,OAAOH,IAAI,CACNI,IAAI,CAAC,kBAAkB,EAAE;IACtBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAOA,QAAQ,CAACC,IAAI;EAExB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASI,UAAU,CAACV,KAAK,EAAC;EACtB;EACA,OAAOH,IAAI,CACPI,IAAI,CAAC,kBAAkB,EAAE;IACrBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,OAAOA,QAAQ,CAACC,IAAI;EACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASK,UAAU,CAACX,KAAK,EAAEY,EAAE,EAAC;EAC1B,OAAOf,IAAI,CAACI,IAAI,CAAC,yBAAyB,EAAE;IACxCD,KAAK;IACLY;EACJ,CAAC,CAAC,CACDV,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC;AAEA,MAAMO,QAAQ,GAAG;EACbJ,WAAW;EACXC,UAAU;EACVC,UAAU;EACVZ;AACJ,CAAC;AAED,eAAec,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}