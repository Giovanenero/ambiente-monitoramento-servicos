{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst crypto_1 = __importDefault(require(\"crypto\")); // this is necessary for some version of nodejs without crypto module\nconst algorithm = 'aes-256-cbc';\n/**\n * crypto random initial vector generated from core node {crypto} module\n */\nconst initialVector = crypto_1.default.randomBytes(16);\n/**\n * crypto random key generated from core node {crypto} module\n *\n * {note}: please read the value for KEY from your app's environment\n */\nconst _key = process.env.KEY || 'please provide a KEY in your .env file or config';\nconst key = crypto_1.default.scryptSync(_key, 'salt', 32);\n/**\n * intermediate data encoder function\n * @param {string.<any>} text\n * @param secret\n * @returns {string} encrypted or cipher text\n */\nexports.encode = text => {\n  let cipher = crypto_1.default.createCipheriv(algorithm, Buffer.from(key), initialVector);\n  let encrypted = cipher.update(text);\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return `${initialVector.toString('hex')}.${encrypted.toString('hex')}`;\n};\n/**\n * intermediate data decoder function\n * @param {string.<any>} text\n * @returns {string.<string>} decrypted data\n */\nexports.decode = text => {\n  if (typeof text !== 'string') {\n    throw new TypeError('argument must be a string, or a string-like object');\n  }\n  const iv = text.split('.')[0];\n  const encryptedData = text.split('.')[1];\n  let _iv = Buffer.from(iv, 'hex');\n  let encryptedText = Buffer.from(encryptedData, 'hex');\n  let decipher = crypto_1.default.createDecipheriv(algorithm, Buffer.from(key), _iv);\n  let decrypted = decipher.update(encryptedText);\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n};","map":{"version":3,"mappings":";;;;;;;;;;AAAA,oDAA4B,CAAI;AAEhC,MAAMA,SAAS,GAAG,aAAa;AAE/B;;;AAGA,MAAMC,aAAa,GAAWC,gBAAM,CAACC,WAAW,CAAC,EAAE,CAAC;AAEpD;;;;;AAKA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,GAAG,IAAI,kDAAkD;AAClF,MAAMC,GAAG,GAAWN,gBAAM,CAACO,UAAU,CAACL,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC;AAEvD;;;;;;AAMaM,cAAM,GAAIC,IAAY,IAAI;EACrC,IAAIC,MAAM,GAAGV,gBAAM,CAACW,cAAc,CAACb,SAAS,EAAEc,MAAM,CAACC,IAAI,CAACP,GAAG,CAAC,EAAEP,aAAa,CAAC;EAC9E,IAAIe,SAAS,GAAGJ,MAAM,CAACK,MAAM,CAACN,IAAI,CAAC;EAEnCK,SAAS,GAAGF,MAAM,CAACI,MAAM,CAAC,CAACF,SAAS,EAAEJ,MAAM,CAACO,KAAK,EAAE,CAAC,CAAC;EACtD,OAAO,GAAGlB,aAAa,CAACmB,QAAQ,CAAC,KAAK,CAAC,IAAIJ,SAAS,CAACI,QAAQ,CAAC,KAAK,CAAC,EAAE;AACxE,CAAC;AAED;;;;;AAKaV,cAAM,GAAIC,IAAY,IAAI;EAErC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIU,SAAS,CAAC,oDAAoD,CAAC;;EAG3E,MAAMC,EAAE,GAAGX,IAAI,CAACY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC7B,MAAMC,aAAa,GAAGb,IAAI,CAACY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAExC,IAAIE,GAAG,GAAGX,MAAM,CAACC,IAAI,CAACO,EAAE,EAAE,KAAK,CAAC;EAChC,IAAII,aAAa,GAAGZ,MAAM,CAACC,IAAI,CAACS,aAAa,EAAE,KAAK,CAAC;EACrD,IAAIG,QAAQ,GAAGzB,gBAAM,CAAC0B,gBAAgB,CAAC5B,SAAS,EAAEc,MAAM,CAACC,IAAI,CAACP,GAAG,CAAC,EAAEiB,GAAG,CAAC;EACxE,IAAII,SAAS,GAAGF,QAAQ,CAACV,MAAM,CAACS,aAAa,CAAC;EAE9CG,SAAS,GAAGf,MAAM,CAACI,MAAM,CAAC,CAACW,SAAS,EAAEF,QAAQ,CAACR,KAAK,EAAE,CAAC,CAAC;EACxD,OAAOU,SAAS,CAACT,QAAQ,EAAE;AAC7B,CAAC","names":["algorithm","initialVector","crypto_1","randomBytes","_key","process","env","KEY","key","scryptSync","exports","text","cipher","createCipheriv","Buffer","from","encrypted","update","concat","final","toString","TypeError","iv","split","encryptedData","_iv","encryptedText","decipher","createDecipheriv","decrypted"],"sources":["/home/lapti/ambiente-monitoramento-servicos/node_modules/ncrypt-js/src/utils.ts"],"sourcesContent":["import crypto from 'crypto';    // this is necessary for some version of nodejs without crypto module\n\nconst algorithm = 'aes-256-cbc';\n\n/**\n * crypto random initial vector generated from core node {crypto} module\n */\nconst initialVector: Buffer = crypto.randomBytes(16);\n\n/**\n * crypto random key generated from core node {crypto} module\n * \n * {note}: please read the value for KEY from your app's environment\n */\nconst _key = process.env.KEY || 'please provide a KEY in your .env file or config';\nconst key: Buffer = crypto.scryptSync(_key, 'salt', 32);\n\n/**\n * intermediate data encoder function\n * @param {string.<any>} text \n * @param secret\n * @returns {string} encrypted or cipher text\n */\nexport const encode = (text: string) => {\n  let cipher = crypto.createCipheriv(algorithm, Buffer.from(key), initialVector);\n  let encrypted = cipher.update(text);\n\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n  return `${initialVector.toString('hex')}.${encrypted.toString('hex')}`;\n}\n\n/**\n * intermediate data decoder function\n * @param {string.<any>} text\n * @returns {string.<string>} decrypted data\n */\nexport const decode = (text: string) => {\n\n  if (typeof text !== 'string') {\n    throw new TypeError('argument must be a string, or a string-like object');\n  }\n\n  const iv = text.split('.')[0];\n  const encryptedData = text.split('.')[1];\n\n  let _iv = Buffer.from(iv, 'hex');\n  let encryptedText = Buffer.from(encryptedData, 'hex');\n  let decipher = crypto.createDecipheriv(algorithm, Buffer.from(key), _iv);\n  let decrypted = decipher.update(encryptedText);\n\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n  return decrypted.toString();\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}