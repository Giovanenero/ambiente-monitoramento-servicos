{"ast":null,"code":"var _jsxFileName = \"/home/lapti/ambiente-monitoramento-servicos/src/views/pages/Servidor.jsx\",\n  _s = $RefreshSig$();\nimport styles from \"./../../assets/views/pages/Servidor.module.css\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, Title, CategoryScale, LinearScale, PointElement, LineElement, Filler } from \"chart.js\";\nimport { Doughnut, Line } from \"react-chartjs-2\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Servidor(_ref) {\n  _s();\n  let {\n    location\n  } = _ref;\n  const props = location.state;\n  const [graphicCpu, setGraphicCpu] = useState(null);\n  const [graphicMemory, setGraphicMemory] = useState(null);\n  useEffect(() => {\n    ChartJS.register(CategoryScale, LinearScale, PointElement, ArcElement, LineElement, Tooltip, Legend, Title, Filler);\n    //Iniaizaliza os dados e as opções de cada gráfico\n    if (props.graphic) {\n      console.log(props.graphic);\n      let time = [];\n      props.graphic.time.forEach(element => {\n        time.push(element.hour);\n      });\n      setGraphicCpu(null);\n      initializeGraphicMemory(time);\n      initializeGraphicCpu();\n      // initializeGraphicLeft();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  // function convertPorcentage(data){\n  //     let sum = parseFloat(data[0]) + parseFloat(data[1]);\n  //     return ((parseFloat(data[0]) / sum) * 100).toFixed(2);\n  // }\n\n  function initializeGraphicMemory(time) {\n    //dados do gráfico de Line a respeito da memória\n    setGraphicMemory({\n      data: {\n        labels: time.reverse(),\n        datasets: [{\n          label: \"Memória Swap\",\n          data: props.graphic.swapMemory.reverse(),\n          backgroundColor: 'rgba(255, 0, 0, 0.2)',\n          borderColor: 'rgba(255, 0, 0, 0.6)',\n          fill: true,\n          pointRadius: 0,\n          lineTension: 0.2\n        }, {\n          label: 'Memória Residente',\n          data: props.graphic.residentMemory.reverse(),\n          backgroundColor: 'rgba(0, 0, 255, 0.2)',\n          borderColor: 'rgba(0, 0, 255, 0.6)',\n          fill: true,\n          pointRadius: 0,\n          lineTension: 0.2\n        }]\n      },\n      options: {\n        maintainAspectRatio: false,\n        responsive: true,\n        plugins: {\n          title: {\n            display: true,\n            text: \"Uso de Memória em Mb\"\n          },\n          legend: {\n            position: \"top\"\n          }\n        }\n      }\n    });\n  }\n  function initializeGraphicCpu() {\n    //dados do gráfico Doughnut(use de disco)\n    let diskUse = props.graphic.disk;\n    let diskTotal = props.graphic.diskTotal;\n    setGraphicCpu({\n      data: {\n        labels: [\"Utilizado(Gb)\", \"Disponível(Gb)\"],\n        datasets: [{\n          label: \"Disponível(Gb)\",\n          data: [diskUse, diskTotal],\n          backgroundColor: ['rgba(0, 92, 200)', 'rgba(220, 220, 220)']\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            text: \"Uso de disco:\",\n            display: true\n          }\n        }\n      },\n      plugins: [{\n        id: \"textCenter\",\n        beforeDatasetsDraw(chart) {\n          const {\n            ctx,\n            data\n          } = chart;\n          ctx.save();\n          ctx.font = \"700 25px sans-serif\";\n          ctx.fillStyle = \"rgba(0, 92, 200)\";\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillText(`${convertPorcentage(data.datasets[0].data)}%`, chart.getDatasetMeta(0).data[0].x, chart.getDatasetMeta(0).data[0].y - 10);\n        }\n      }, {\n        id: \"textCenter\",\n        beforeDatasetsDraw(chart) {\n          const {\n            ctx\n          } = chart;\n          ctx.save();\n          ctx.font = \"200 14px sans-serif\";\n          ctx.fillStyle = \"rgba(0, 92, 200)\";\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillText(\"Utilizado\", chart.getDatasetMeta(0).data[0].x, chart.getDatasetMeta(0).data[0].y + 20);\n        }\n      }]\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: \"#eee\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.containerServidor,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Informa\\xE7\\xF5es do Servidor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.contentServidor,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.useDisk,\n          children: graphicCpu && /*#__PURE__*/_jsxDEV(Doughnut, {\n            data: graphicCpu.data,\n            options: graphicCpu.options,\n            plugins: graphicCpu.plugins\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.useGraphic,\n          children: graphicMemory && /*#__PURE__*/_jsxDEV(Line, {\n            data: graphicMemory.data,\n            options: graphicMemory.options\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n_s(Servidor, \"vHzP0TOevW3gOTx1ek1qx94Kl80=\");\n_c = Servidor;\nexport default Servidor;\nvar _c;\n$RefreshReg$(_c, \"Servidor\");","map":{"version":3,"names":["styles","Chart","ChartJS","ArcElement","Tooltip","Legend","Title","CategoryScale","LinearScale","PointElement","LineElement","Filler","Doughnut","Line","useState","useEffect","Servidor","location","props","state","graphicCpu","setGraphicCpu","graphicMemory","setGraphicMemory","register","graphic","console","log","time","forEach","element","push","hour","initializeGraphicMemory","initializeGraphicCpu","data","labels","reverse","datasets","label","swapMemory","backgroundColor","borderColor","fill","pointRadius","lineTension","residentMemory","options","maintainAspectRatio","responsive","plugins","title","display","text","legend","position","diskUse","disk","diskTotal","id","beforeDatasetsDraw","chart","ctx","save","font","fillStyle","textAlign","textBaseline","fillText","convertPorcentage","getDatasetMeta","x","y","background","containerServidor","contentServidor","useDisk","useGraphic"],"sources":["/home/lapti/ambiente-monitoramento-servicos/src/views/pages/Servidor.jsx"],"sourcesContent":["import styles from \"./../../assets/views/pages/Servidor.module.css\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, Title, CategoryScale, LinearScale, PointElement, LineElement, Filler } from \"chart.js\"\nimport { Doughnut, Line } from \"react-chartjs-2\";\nimport { useState, useEffect } from \"react\";\n\nfunction Servidor({location}){\n\n    const props = location.state;\n    \n    const [graphicCpu, setGraphicCpu] = useState(null)\n    const [graphicMemory, setGraphicMemory] = useState(null)\n\n    useEffect(() => {\n        ChartJS.register(CategoryScale, LinearScale, PointElement, ArcElement, LineElement, Tooltip, Legend, Title, Filler);\n        //Iniaizaliza os dados e as opções de cada gráfico\n        if(props.graphic){\n            console.log(props.graphic);\n            let time = [];\n            props.graphic.time.forEach(element => {\n                time.push(element.hour);\n            })\n            setGraphicCpu(null)\n            initializeGraphicMemory(time);\n            initializeGraphicCpu();\n            // initializeGraphicLeft();\n        }\n        // eslint-disable-next-line\n    }, []); \n\n    // function convertPorcentage(data){\n    //     let sum = parseFloat(data[0]) + parseFloat(data[1]);\n    //     return ((parseFloat(data[0]) / sum) * 100).toFixed(2);\n    // }\n\n    \n    function initializeGraphicMemory(time){\n        //dados do gráfico de Line a respeito da memória\n        setGraphicMemory({\n            data: {\n                labels: time.reverse(),\n                datasets: [{\n                    label: \"Memória Swap\",\n                    data: props.graphic.swapMemory.reverse(),\n                    backgroundColor: 'rgba(255, 0, 0, 0.2)',\n                    borderColor: 'rgba(255, 0, 0, 0.6)',\n                    fill: true,\n                    pointRadius: 0,\n                    lineTension: 0.2\n                }, {\n                    label: 'Memória Residente',\n                    data: props.graphic.residentMemory.reverse(),\n                    backgroundColor: 'rgba(0, 0, 255, 0.2)',\n                    borderColor: 'rgba(0, 0, 255, 0.6)',\n                    fill: true,\n                    pointRadius: 0,\n                    lineTension: 0.2\n                }]\n            },\n            options: {\n                maintainAspectRatio: false,\n                responsive: true,\n                plugins: {\n                    title: {\n                        display: true,\n                        text: \"Uso de Memória em Mb\"\n                    },\n                    legend: {\n                        position: \"top\"\n                    },\n                },\n            }\n        })\n    }\n\n    function initializeGraphicCpu(){\n        //dados do gráfico Doughnut(use de disco)\n        let diskUse = props.graphic.disk;\n        let diskTotal = props.graphic.diskTotal;\n        setGraphicCpu({data: {\n            labels: [\"Utilizado(Gb)\", \"Disponível(Gb)\"],\n            datasets: [{\n                label: \"Disponível(Gb)\",\n                data: [diskUse, diskTotal],\n                backgroundColor: ['rgba(0, 92, 200)', 'rgba(220, 220, 220)']\n            }]\n            }, options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    title: {\n                        text: \"Uso de disco:\", display: true\n                    },\n                },\n            }, plugins: [\n                {\n                    id: \"textCenter\",\n                    beforeDatasetsDraw(chart){\n                        const {ctx, data} = chart;\n                        ctx.save();\n                        ctx.font = \"700 25px sans-serif\";\n                        ctx.fillStyle = \"rgba(0, 92, 200)\";\n                        ctx.textAlign = \"center\";\n                        ctx.textBaseline = \"middle\";\n                        ctx.fillText(`${convertPorcentage(data.datasets[0].data)}%`, chart.getDatasetMeta(0).data[0].x,  chart.getDatasetMeta(0).data[0].y -10);\n                    }\n                }, {\n                    id: \"textCenter\",\n                    beforeDatasetsDraw(chart){\n                        const {ctx} = chart;\n                        ctx.save();\n                        ctx.font = \"200 14px sans-serif\";\n                        ctx.fillStyle = \"rgba(0, 92, 200)\";\n                        ctx.textAlign = \"center\";\n                        ctx.textBaseline = \"middle\";\n                        ctx.fillText(\"Utilizado\", chart.getDatasetMeta(0).data[0].x,  chart.getDatasetMeta(0).data[0].y + 20);\n                    }\n                }\n            ]\n        });\n    }\n\n    return (    \n        <div style={{background: \"#eee\"}}>\n            <div className={styles.containerServidor}>\n                <p>Informações do Servidor</p>\n                <div className={styles.contentServidor}>\n                    <div className={styles.useDisk}>\n                        {graphicCpu && \n                            <Doughnut \n                                data={graphicCpu.data} \n                                options={graphicCpu.options} \n                                plugins={graphicCpu.plugins}\n                            />}\n                    </div>\n                    <div className={styles.useGraphic}>\n                        {graphicMemory && <Line data={graphicMemory.data} options={graphicMemory.options}/>}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Servidor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}