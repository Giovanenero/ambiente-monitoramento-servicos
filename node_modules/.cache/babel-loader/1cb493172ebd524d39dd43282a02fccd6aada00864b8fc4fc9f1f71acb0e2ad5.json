{"ast":null,"code":"import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token) {\n  return http.post(\"/getuser/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token) {\n  return http.post(\"/getsystemusers/\", {\n    token\n  }).then(response => {\n    if (response.data) {\n      let aux = null;\n      let data = [];\n      const teste = async userId => {\n        return new Promise(resolve => {\n          useraccess(token, userId).then(data => {\n            let time = DataParse.parseDate(data.date);\n            if (time) {\n              aux = {\n                time: time.day + \" às \" + time.hour,\n                action: data.jobType\n              };\n            }\n            resolve();\n          }).catch(error => console.log(error));\n        });\n      };\n      response.data.forEach(user => {\n        teste(user.userId);\n        if (aux) {\n          data.push({\n            ...user,\n            lastTimeOnline: aux.time,\n            lastTypeAction: aux.action\n          });\n        }\n      });\n      return data;\n    }\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token) {\n  // eslint-disable-next-line \n  return http.post(\"/getloggedusers/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id) {\n  return http.post(\"/getsystemlogsbyuserid/\", {\n    token,\n    id\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\nconst endpoint = {\n  systemusers,\n  systemlogs,\n  useraccess,\n  infouser\n};\nexport default endpoint;","map":{"version":3,"names":["http","DataParse","infouser","token","post","then","response","data","catch","error","console","log","systemusers","aux","teste","userId","Promise","resolve","useraccess","time","parseDate","date","day","hour","action","jobType","forEach","user","push","lastTimeOnline","lastTypeAction","systemlogs","id","endpoint"],"sources":["/home/lapti/ambiente-monitoramento-servicos/src/endpoint/SystemUsers.jsx"],"sourcesContent":["import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token){\n    return http\n        .post(\"/getuser/\", {token})\n        .then(response => {return response.data})\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token){\n    return http\n        .post(\"/getsystemusers/\", {\n            token,\n        })\n        .then(response => {\n            if(response.data){\n                let aux = null;\n                let data = [];\n                const teste = async (userId) => {\n                    return new Promise(resolve => {\n                        useraccess(token, userId)\n                        .then(data => {\n                            let time = DataParse.parseDate(data.date);\n                            if(time){\n                                aux = {\n                                    time: time.day + \" às \" + time.hour,\n                                    action: data.jobType,\n                                }\n                            } \n                            resolve();\n                        })\n                        .catch(error => console.log(error));\n                    })\n                }\n\n                response.data.forEach(user => {\n                    teste(user.userId);\n                    if(aux){\n                        data.push({\n                            ...user,\n                            lastTimeOnline: aux.time,\n                            lastTypeAction: aux.action,\n                        })\n                    }\n                })\n                return data;\n            }\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token){\n    // eslint-disable-next-line \n    return http.\n        post(\"/getloggedusers/\", {\n            token,\n        })\n        .then(response => {\n            return response.data;\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id){\n    return http.post(\"/getsystemlogsbyuserid/\", {\n        token,\n        id,\n    })\n    .then(response => {return response.data})\n    .catch(error => console.log(error))\n}\n\nconst endpoint = {\n    systemusers,\n    systemlogs,\n    useraccess,\n    infouser,\n};\n\nexport default endpoint;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,eAAe;AAChC,OAAOC,SAAS,MAAM,sBAAsB;;AAE5C;AACA,SAASC,QAAQ,CAACC,KAAK,EAAC;EACpB,OAAOH,IAAI,CACNI,IAAI,CAAC,WAAW,EAAE;IAACD;EAAK,CAAC,CAAC,CAC1BE,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASG,WAAW,CAACT,KAAK,EAAC;EACvB,OAAOH,IAAI,CACNI,IAAI,CAAC,kBAAkB,EAAE;IACtBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,IAAGA,QAAQ,CAACC,IAAI,EAAC;MACb,IAAIM,GAAG,GAAG,IAAI;MACd,IAAIN,IAAI,GAAG,EAAE;MACb,MAAMO,KAAK,GAAG,MAAOC,MAAM,IAAK;QAC5B,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;UAC1BC,UAAU,CAACf,KAAK,EAAEY,MAAM,CAAC,CACxBV,IAAI,CAACE,IAAI,IAAI;YACV,IAAIY,IAAI,GAAGlB,SAAS,CAACmB,SAAS,CAACb,IAAI,CAACc,IAAI,CAAC;YACzC,IAAGF,IAAI,EAAC;cACJN,GAAG,GAAG;gBACFM,IAAI,EAAEA,IAAI,CAACG,GAAG,GAAG,MAAM,GAAGH,IAAI,CAACI,IAAI;gBACnCC,MAAM,EAAEjB,IAAI,CAACkB;cACjB,CAAC;YACL;YACAR,OAAO,EAAE;UACb,CAAC,CAAC,CACDT,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC;MACN,CAAC;MAEDH,QAAQ,CAACC,IAAI,CAACmB,OAAO,CAACC,IAAI,IAAI;QAC1Bb,KAAK,CAACa,IAAI,CAACZ,MAAM,CAAC;QAClB,IAAGF,GAAG,EAAC;UACHN,IAAI,CAACqB,IAAI,CAAC;YACN,GAAGD,IAAI;YACPE,cAAc,EAAEhB,GAAG,CAACM,IAAI;YACxBW,cAAc,EAAEjB,GAAG,CAACW;UACxB,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;MACF,OAAOjB,IAAI;IACf;EACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASsB,UAAU,CAAC5B,KAAK,EAAC;EACtB;EACA,OAAOH,IAAI,CACPI,IAAI,CAAC,kBAAkB,EAAE;IACrBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,OAAOA,QAAQ,CAACC,IAAI;EACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASS,UAAU,CAACf,KAAK,EAAE6B,EAAE,EAAC;EAC1B,OAAOhC,IAAI,CAACI,IAAI,CAAC,yBAAyB,EAAE;IACxCD,KAAK;IACL6B;EACJ,CAAC,CAAC,CACD3B,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC;AAEA,MAAMwB,QAAQ,GAAG;EACbrB,WAAW;EACXmB,UAAU;EACVb,UAAU;EACVhB;AACJ,CAAC;AAED,eAAe+B,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}