{"ast":null,"code":"import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token) {\n  return http.post(\"/getuser/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token) {\n  return http.post(\"/getsystemusers/\", {\n    token\n  }).then(response => {\n    let userTimeAction = function (data) {\n      let aux = [];\n      const teste2 = async user => {\n        const teste = async user => {\n          return new Promise(resolve => {\n            useraccess(token, user.userId).then(userData => {\n              if (userData.length > 0) {\n                // let time = DataParse.parseDate(userData[0].date)\n                // if(time){\n                //     aux.push({\n                //         ...user,\n                //         lastTimeOnline: time.day + \" às \" + time.hour,\n                //         lastAction: userData[0].jobType,\n                //     })\n                // }\n                console.log(\"aa\");\n                resolve();\n              }\n            }).catch(error => console.log(error));\n          });\n        };\n        await teste(user);\n      };\n      data.forEach(user => {\n        teste2(user);\n      });\n      return aux;\n    };\n    if (response.data.length > 0) {\n      let data = response.data;\n      let aux = [];\n      aux = userTimeAction(data);\n      return aux;\n    }\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token) {\n  // eslint-disable-next-line \n  return http.post(\"/getloggedusers/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id) {\n  return http.post(\"/getsystemlogsbyuserid/\", {\n    token,\n    id\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\nconst endpoint = {\n  systemusers,\n  systemlogs,\n  useraccess,\n  infouser\n};\nexport default endpoint;","map":{"version":3,"names":["http","DataParse","infouser","token","post","then","response","data","catch","error","console","log","systemusers","userTimeAction","aux","teste2","user","teste","Promise","resolve","useraccess","userId","userData","length","forEach","systemlogs","id","endpoint"],"sources":["/home/lapti/ambiente-monitoramento-servicos/src/endpoint/SystemUsers.jsx"],"sourcesContent":["import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token){\n    return http\n        .post(\"/getuser/\", {token})\n        .then(response => {return response.data})\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token){\n    return http\n        .post(\"/getsystemusers/\", {\n            token,\n        })\n        .then(response => {\n            let userTimeAction = function(data) {\n                let aux = [];\n                const teste2 = async (user) => {\n                    const teste = async (user) => {\n                        return new Promise(resolve => {\n                            useraccess(token, user.userId)\n                            .then(userData => {\n                                if(userData.length > 0){\n                                    // let time = DataParse.parseDate(userData[0].date)\n                                    // if(time){\n                                    //     aux.push({\n                                    //         ...user,\n                                    //         lastTimeOnline: time.day + \" às \" + time.hour,\n                                    //         lastAction: userData[0].jobType,\n                                    //     })\n                                    // }\n                                    console.log(\"aa\");\n                                    resolve();\n                                }\n                            })\n                            .catch(error => console.log(error));\n                            })\n                    }\n                    await teste(user);\n                }\n                data.forEach(user => {\n                    teste2(user)\n                })\n                return aux;\n            }\n            if(response.data.length > 0){\n                let data = response.data;\n                let aux = [];\n                aux = userTimeAction(data);\n                return aux;\n            }\n\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token){\n    // eslint-disable-next-line \n    return http.\n        post(\"/getloggedusers/\", {\n            token,\n        })\n        .then(response => {\n            return response.data;\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id){\n    return http.post(\"/getsystemlogsbyuserid/\", {\n        token,\n        id,\n    })\n    .then(response => {return response.data})\n    .catch(error => console.log(error))\n}\n\nconst endpoint = {\n    systemusers,\n    systemlogs,\n    useraccess,\n    infouser,\n};\n\nexport default endpoint;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,eAAe;AAChC,OAAOC,SAAS,MAAM,sBAAsB;;AAE5C;AACA,SAASC,QAAQ,CAACC,KAAK,EAAC;EACpB,OAAOH,IAAI,CACNI,IAAI,CAAC,WAAW,EAAE;IAACD;EAAK,CAAC,CAAC,CAC1BE,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASG,WAAW,CAACT,KAAK,EAAC;EACvB,OAAOH,IAAI,CACNI,IAAI,CAAC,kBAAkB,EAAE;IACtBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,IAAIO,cAAc,GAAG,UAASN,IAAI,EAAE;MAChC,IAAIO,GAAG,GAAG,EAAE;MACZ,MAAMC,MAAM,GAAG,MAAOC,IAAI,IAAK;QAC3B,MAAMC,KAAK,GAAG,MAAOD,IAAI,IAAK;UAC1B,OAAO,IAAIE,OAAO,CAACC,OAAO,IAAI;YAC1BC,UAAU,CAACjB,KAAK,EAAEa,IAAI,CAACK,MAAM,CAAC,CAC7BhB,IAAI,CAACiB,QAAQ,IAAI;cACd,IAAGA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAC;gBACnB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACAb,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;gBACjBQ,OAAO,EAAE;cACb;YACJ,CAAC,CAAC,CACDX,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;UACnC,CAAC,CAAC;QACV,CAAC;QACD,MAAMQ,KAAK,CAACD,IAAI,CAAC;MACrB,CAAC;MACDT,IAAI,CAACiB,OAAO,CAACR,IAAI,IAAI;QACjBD,MAAM,CAACC,IAAI,CAAC;MAChB,CAAC,CAAC;MACF,OAAOF,GAAG;IACd,CAAC;IACD,IAAGR,QAAQ,CAACC,IAAI,CAACgB,MAAM,GAAG,CAAC,EAAC;MACxB,IAAIhB,IAAI,GAAGD,QAAQ,CAACC,IAAI;MACxB,IAAIO,GAAG,GAAG,EAAE;MACZA,GAAG,GAAGD,cAAc,CAACN,IAAI,CAAC;MAC1B,OAAOO,GAAG;IACd;EAEJ,CAAC,CAAC,CACDN,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASgB,UAAU,CAACtB,KAAK,EAAC;EACtB;EACA,OAAOH,IAAI,CACPI,IAAI,CAAC,kBAAkB,EAAE;IACrBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,OAAOA,QAAQ,CAACC,IAAI;EACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASW,UAAU,CAACjB,KAAK,EAAEuB,EAAE,EAAC;EAC1B,OAAO1B,IAAI,CAACI,IAAI,CAAC,yBAAyB,EAAE;IACxCD,KAAK;IACLuB;EACJ,CAAC,CAAC,CACDrB,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC;AAEA,MAAMkB,QAAQ,GAAG;EACbf,WAAW;EACXa,UAAU;EACVL,UAAU;EACVlB;AACJ,CAAC;AAED,eAAeyB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}