{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"./utils\");\nclass Ncrypt {\n  /**\n   * object constructor\n   * @param text\n   * @param secret\n   */\n  constructor(secret) {\n    /**\n     * convert all entered text to decimal equivalent character codes\n     * @param {data.<string>} data to be converted\n     * @return {Array.<number>} array of character codes\n     */\n    this.convertTextToDecimal = data => data.split('').map(value => value.charCodeAt(0));\n    /**\n     * encode provided secret on decimal character codes\n     * @param {charCode<number[], *>} character codes\n     */\n    this.applySecretToCharacters = charCodes => this.convertTextToDecimal(this.secret).reduce((firstValue, secondValue) => firstValue ^ secondValue, charCodes);\n    /**\n     * convert character bytes to hexadecimal equivalent\n     * @param {number.<number>}\n     * @returns {string} hexadecimal string\n     */\n    this.convertByteToHexadecimal = number => {\n      return (\"0\" + Number(number).toString(16)).substr(-2);\n    };\n    /**\n     * process data to be encrypted\n     * @param {}\n     * @returns {string.<string>} encoded string data\n     */\n    this.encrypt = data => {\n      /**\n       * this does the actual processing return a string\n       * resulting from charCode conversion, salting and\n       * hexadecimal mapping\n       *\n       */\n      // if (data == void 0) throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');\n      try {\n        const encodedMessage = JSON.stringify(data).split('').map(this.convertTextToDecimal).map(this.applySecretToCharacters).map(this.convertByteToHexadecimal).join('');\n        return utils_1.encode(encodedMessage);\n      } catch (error) {\n        throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');\n      }\n    };\n    /**\n     * decodes encoded string resulting from util encryption\n     * @param {string.<stirng>} encodeData\n     * @returns {decodedData.<string>} decoded data\n     */\n    this.decrypt = text => {\n      const encodeData = utils_1.decode(text);\n      const data = encodeData.match(/.{1,2}/g).map(hex => parseInt(hex, 16)).map(this.applySecretToCharacters).map(charCode => String.fromCharCode(charCode)).join('');\n      const arr = [];\n      arr.push(data);\n      return JSON.parse(data);\n    };\n    this.secret = secret;\n  }\n}\nexports.default = Ncrypt;","map":{"version":3,"mappings":";;;;;AACA;AAEA,MAAqBA,MAAM;EAazB;;;;;EAKAC,YAAYC,MAAc;IAI1B;;;;;IAKA,yBAAoB,GAAIC,IAAY,IAAKA,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;IAE3F;;;;IAIA,4BAAuB,GAAIC,SAAqC,IAAK,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACP,MAAM,CAAC,CACxGQ,MAAM,CAAC,CAACC,UAAe,EAAEC,WAAgB,KAAMD,UAAU,GAAGC,WAAY,EAAEJ,SAAS,CAAC;IAEvF;;;;;IAKA,6BAAwB,GAAIK,MAAc,IAAI;MAC5C,OAAO,CAAC,GAAG,GAAGC,MAAM,CAACD,MAAM,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC,EAAEC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;;;IAKA,YAAO,GAAIb,IAAwC,IAAI;MACrD;;;;;;MAMA;MACA,IAAI;QACF,MAAMc,cAAc,GAAGC,IAAI,CAACC,SAAS,CAAChB,IAAI,CAAC,CAACC,KAAK,CAAC,EAAE,CAAC,CAClDC,GAAG,CAAC,IAAI,CAACI,oBAAoB,CAAC,CAC9BJ,GAAG,CAAC,IAAI,CAACe,uBAAuB,CAAC,CACjCf,GAAG,CAAC,IAAI,CAACgB,wBAAwB,CAAC,CAClCC,IAAI,CAAC,EAAE,CAAC;QAEX,OAAOC,cAAM,CAACN,cAAc,CAAC;OAC9B,CAAC,OAAOO,KAAK,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,iGAAiG,CAAC;;IAEtH,CAAC;IAED;;;;;IAKA,YAAO,GAAIC,IAAY,IAAI;MACzB,MAAMC,UAAU,GAAGJ,cAAM,CAACG,IAAI,CAAC;MAE7B,MAAMvB,IAAI,GAAGwB,UAAU,CAACC,KAAK,CAAC,SAAS,CAAC,CACrCvB,GAAG,CAAEwB,GAAQ,IAAKC,QAAQ,CAACD,GAAG,EAAE,EAAE,CAAC,CAAC,CACpCxB,GAAG,CAAC,IAAI,CAACe,uBAAuB,CAAC,CACjCf,GAAG,CAAE0B,QAAa,IAAKC,MAAM,CAACC,YAAY,CAACF,QAAQ,CAAC,CAAC,CACrDT,IAAI,CAAC,EAAE,CAAC;MAET,MAAMY,GAAG,GAAG,EAAE;MACdA,GAAG,CAACC,IAAI,CAAChC,IAAI,CAAC;MAEhB,OAAOe,IAAI,CAACkB,KAAK,CAACjC,IAAI,CAAC;IAC3B,CAAC;IAtEC,IAAI,CAACD,MAAM,GAAGA,MAAM;EACtB;;AApBFmC","names":["Ncrypt","constructor","secret","data","split","map","value","charCodeAt","charCodes","convertTextToDecimal","reduce","firstValue","secondValue","number","Number","toString","substr","encodedMessage","JSON","stringify","applySecretToCharacters","convertByteToHexadecimal","join","utils_1","error","Error","text","encodeData","match","hex","parseInt","charCode","String","fromCharCode","arr","push","parse","exports"],"sources":["/home/lapti/ambiente-monitoramento-servicos/node_modules/ncrypt-js/src/ncrypt.ts"],"sourcesContent":["import { INcrypt } from './ncrypt.d';\nimport { encode, decode } from './utils';\n\nexport default class Ncrypt implements INcrypt {\n\n  /**\n   * ncrypt namespace.\n   * @type {string.<*>}\n   */\n  private secret: string;\n\n  /**\n   * ncrypt namespace.\n   * @type {string.<*>}\n   */\n  private text: string;\n  /**\n   * object constructor\n   * @param text \n   * @param secret \n   */\n  constructor(secret: string) {\n    this.secret = secret;\n  }\n\n  /**\n   * convert all entered text to decimal equivalent character codes\n   * @param {data.<string>} data to be converted\n   * @return {Array.<number>} array of character codes\n   */\n  convertTextToDecimal = (data: string) => data.split('').map((value) => value.charCodeAt(0));\n\n  /**\n   * encode provided secret on decimal character codes\n   * @param {charCode<number[], *>} character codes\n   */\n  applySecretToCharacters = (charCodes: number[] | number | string) => this.convertTextToDecimal(this.secret)\n    .reduce((firstValue: any, secondValue: any) => (firstValue ^ secondValue), charCodes)\n\n  /**\n   * convert character bytes to hexadecimal equivalent\n   * @param {number.<number>}\n   * @returns {string} hexadecimal string\n   */\n  convertByteToHexadecimal = (number: number) => {\n    return (\"0\" + Number(number).toString(16)).substr(-2);\n  }\n\n  /**\n   * process data to be encrypted\n   * @param {}\n   * @returns {string.<string>} encoded string data\n   */\n  encrypt = (data: object | string | number | boolean) => {\n    /**\n     * this does the actual processing return a string\n     * resulting from charCode conversion, salting and \n     * hexadecimal mapping\n     * \n     */\n    // if (data == void 0) throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');\n    try {\n      const encodedMessage = JSON.stringify(data).split('')\n        .map(this.convertTextToDecimal)\n        .map(this.applySecretToCharacters)\n        .map(this.convertByteToHexadecimal)\n        .join('');\n\n      return encode(encodedMessage);\n    } catch (error) {\n      throw new Error('invalid data was entered, enter data of type object, number, string or boolean to be encrypted.');\n    }\n  }\n\n  /**\n   * decodes encoded string resulting from util encryption\n   * @param {string.<stirng>} encodeData \n   * @returns {decodedData.<string>} decoded data\n   */\n  decrypt = (text: string) => {\n    const encodeData = decode(text);\n\n      const data = encodeData.match(/.{1,2}/g)\n        .map((hex: any) => parseInt(hex, 16))\n        .map(this.applySecretToCharacters)\n        .map((charCode: any) => String.fromCharCode(charCode))\n        .join('');\n\n        const arr = [];\n        arr.push(data);\n\n      return JSON.parse(data);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}