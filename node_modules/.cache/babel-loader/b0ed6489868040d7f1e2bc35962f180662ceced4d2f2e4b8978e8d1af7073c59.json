{"ast":null,"code":"import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token) {\n  return http.post(\"/getuser/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token) {\n  return http.post(\"/getsystemusers/\", {\n    token\n  }).then(response => {\n    if (response.data) {\n      var aux = null;\n      let auxData = [];\n      const teste = async userId => {\n        return new Promise(resolve => {\n          useraccess(token, userId).then(data => {\n            let time = DataParse.parseDate(data.date);\n            if (time) {\n              aux = {\n                time: time.day + \" às \" + time.hour,\n                action: data.jobType\n              };\n            }\n            resolve();\n          }).catch(error => console.log(error));\n        });\n      };\n      const wait = async user => {\n        await teste(user.userId);\n        console.log(\"aaaa\");\n      };\n      response.data.forEach(user => {\n        wait(user);\n      });\n      return auxData;\n    }\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token) {\n  // eslint-disable-next-line \n  return http.post(\"/getloggedusers/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id) {\n  return http.post(\"/getsystemlogsbyuserid/\", {\n    token,\n    id\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\nconst endpoint = {\n  systemusers,\n  systemlogs,\n  useraccess,\n  infouser\n};\nexport default endpoint;","map":{"version":3,"names":["http","DataParse","infouser","token","post","then","response","data","catch","error","console","log","systemusers","aux","auxData","teste","userId","Promise","resolve","useraccess","time","parseDate","date","day","hour","action","jobType","wait","user","forEach","systemlogs","id","endpoint"],"sources":["/home/lapti/ambiente-monitoramento-servicos/src/endpoint/SystemUsers.jsx"],"sourcesContent":["import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token){\n    return http\n        .post(\"/getuser/\", {token})\n        .then(response => {return response.data})\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token){\n    return http\n        .post(\"/getsystemusers/\", {\n            token,\n        })\n        .then(response => {\n            if(response.data){\n                var aux = null;\n                let auxData = [];\n                const teste = async (userId) => {\n                    return new Promise((resolve) => {\n                        useraccess(token, userId)\n                        .then(data => {\n                            let time = DataParse.parseDate(data.date);\n                            if(time){\n                                aux = {\n                                    time: time.day + \" às \" + time.hour,\n                                    action: data.jobType,\n                                }\n                            } \n                            resolve();\n                        })\n                        .catch(error => console.log(error));\n                    })\n                }\n\n                const wait = async (user) => {\n                    await teste(user.userId);\n                    console.log(\"aaaa\");\n                }\n\n                response.data.forEach(user => {\n                    wait(user);\n                })\n                return auxData;\n            }\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token){\n    // eslint-disable-next-line \n    return http.\n        post(\"/getloggedusers/\", {\n            token,\n        })\n        .then(response => {\n            return response.data;\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id){\n    return http.post(\"/getsystemlogsbyuserid/\", {\n        token,\n        id,\n    })\n    .then(response => {return response.data})\n    .catch(error => console.log(error))\n}\n\nconst endpoint = {\n    systemusers,\n    systemlogs,\n    useraccess,\n    infouser,\n};\n\nexport default endpoint;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,eAAe;AAChC,OAAOC,SAAS,MAAM,sBAAsB;;AAE5C;AACA,SAASC,QAAQ,CAACC,KAAK,EAAC;EACpB,OAAOH,IAAI,CACNI,IAAI,CAAC,WAAW,EAAE;IAACD;EAAK,CAAC,CAAC,CAC1BE,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASG,WAAW,CAACT,KAAK,EAAC;EACvB,OAAOH,IAAI,CACNI,IAAI,CAAC,kBAAkB,EAAE;IACtBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,IAAGA,QAAQ,CAACC,IAAI,EAAC;MACb,IAAIM,GAAG,GAAG,IAAI;MACd,IAAIC,OAAO,GAAG,EAAE;MAChB,MAAMC,KAAK,GAAG,MAAOC,MAAM,IAAK;QAC5B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;UAC5BC,UAAU,CAAChB,KAAK,EAAEa,MAAM,CAAC,CACxBX,IAAI,CAACE,IAAI,IAAI;YACV,IAAIa,IAAI,GAAGnB,SAAS,CAACoB,SAAS,CAACd,IAAI,CAACe,IAAI,CAAC;YACzC,IAAGF,IAAI,EAAC;cACJP,GAAG,GAAG;gBACFO,IAAI,EAAEA,IAAI,CAACG,GAAG,GAAG,MAAM,GAAGH,IAAI,CAACI,IAAI;gBACnCC,MAAM,EAAElB,IAAI,CAACmB;cACjB,CAAC;YACL;YACAR,OAAO,EAAE;UACb,CAAC,CAAC,CACDV,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC;MACN,CAAC;MAED,MAAMkB,IAAI,GAAG,MAAOC,IAAI,IAAK;QACzB,MAAMb,KAAK,CAACa,IAAI,CAACZ,MAAM,CAAC;QACxBN,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACvB,CAAC;MAEDL,QAAQ,CAACC,IAAI,CAACsB,OAAO,CAACD,IAAI,IAAI;QAC1BD,IAAI,CAACC,IAAI,CAAC;MACd,CAAC,CAAC;MACF,OAAOd,OAAO;IAClB;EACJ,CAAC,CAAC,CACDN,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASqB,UAAU,CAAC3B,KAAK,EAAC;EACtB;EACA,OAAOH,IAAI,CACPI,IAAI,CAAC,kBAAkB,EAAE;IACrBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,OAAOA,QAAQ,CAACC,IAAI;EACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASU,UAAU,CAAChB,KAAK,EAAE4B,EAAE,EAAC;EAC1B,OAAO/B,IAAI,CAACI,IAAI,CAAC,yBAAyB,EAAE;IACxCD,KAAK;IACL4B;EACJ,CAAC,CAAC,CACD1B,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC;AAEA,MAAMuB,QAAQ,GAAG;EACbpB,WAAW;EACXkB,UAAU;EACVX,UAAU;EACVjB;AACJ,CAAC;AAED,eAAe8B,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}