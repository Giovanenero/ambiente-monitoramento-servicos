{"ast":null,"code":"import http from \"./http-common\";\n//import DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token) {\n  return http.post(\"/getuser/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\nconst newUser = (token, user) => {\n  let ready = false;\n  useraccess(token, user.userId).then(userData => {\n    console.log(userData);\n    ready = !ready;\n  }).catch(error => console.log(error));\n  let id = setInterval(frame, 100);\n  function frame() {\n    if (ready) {\n      clearInterval(id);\n      console.log(\"passou\");\n    }\n  }\n};\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token) {\n  return http.post(\"/getsystemusers/\", {\n    token\n  }).then(response => {\n    // let userTimeAction = function(data) {\n    //     let aux = [];\n    //     const teste2 = async (user) => {\n    //         const teste = async (user) => {\n    //             return new Promise(resolve => {\n    //                 useraccess(token, user.userId)\n    //                 .then(userData => {\n    //                     if(userData){\n    //                         // let time = DataParse.parseDate(userData[0].date)\n    //                         // if(time){\n    //                         //     aux.push({\n    //                         //         ...user,\n    //                         //         lastTimeOnline: time.day + \" às \" + time.hour,\n    //                         //         lastAction: userData[0].jobType,\n    //                         //     })\n    //                         // }\n    //                         console.log(userData);\n    //                         resolve();\n    //                     }\n    //                 })\n    //                 .catch(error => console.log(error));\n    //                 })\n    //         }\n    //         await teste(user);\n    //     }\n    //     // data.forEach(user => {\n    //     //     teste2(user)\n    //     // })\n    //     return aux;\n    // }\n\n    const wait = async data => {\n      let response = [];\n      return new Promise(resolve => {\n        data.forEach(user => {\n          useraccess(token).then(userData => {\n            console.log(userData);\n          }).catch(error => console.log(error));\n        });\n      });\n    };\n    if (response.data.length > 0) {\n      let data = response.data;\n      let aux = [];\n      data.forEach(user => {});\n    } else {\n      return aux;\n    }\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token) {\n  // eslint-disable-next-line \n  return http.post(\"/getloggedusers/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id) {\n  return http.post(\"/getsystemlogsbyuserid/\", {\n    token,\n    id\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\nconst endpoint = {\n  systemusers,\n  systemlogs,\n  useraccess,\n  infouser\n};\nexport default endpoint;","map":{"version":3,"names":["http","infouser","token","post","then","response","data","catch","error","console","log","newUser","user","ready","useraccess","userId","userData","id","setInterval","frame","clearInterval","systemusers","wait","Promise","resolve","forEach","length","aux","systemlogs","endpoint"],"sources":["/home/lapti/ambiente-monitoramento-servicos/src/endpoint/SystemUsers.jsx"],"sourcesContent":["import http from \"./http-common\";\n//import DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token){\n    return http\n        .post(\"/getuser/\", {token})\n        .then(response => {return response.data})\n        .catch(error => console.log(error));\n}\n\nconst newUser = (token, user) => {\n    let ready = false;\n    useraccess(token, user.userId)\n    .then(userData => {\n        console.log(userData);\n        ready =  !ready;\n    })\n    .catch(error => console.log(error));\n    let id = setInterval(frame, 100);\n    function frame(){\n        if(ready){\n            clearInterval(id);\n            console.log(\"passou\")\n        }\n    }\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token){\n    return http\n        .post(\"/getsystemusers/\", {\n            token,\n        })\n        .then(response => {\n            // let userTimeAction = function(data) {\n            //     let aux = [];\n            //     const teste2 = async (user) => {\n            //         const teste = async (user) => {\n            //             return new Promise(resolve => {\n            //                 useraccess(token, user.userId)\n            //                 .then(userData => {\n            //                     if(userData){\n            //                         // let time = DataParse.parseDate(userData[0].date)\n            //                         // if(time){\n            //                         //     aux.push({\n            //                         //         ...user,\n            //                         //         lastTimeOnline: time.day + \" às \" + time.hour,\n            //                         //         lastAction: userData[0].jobType,\n            //                         //     })\n            //                         // }\n            //                         console.log(userData);\n            //                         resolve();\n            //                     }\n            //                 })\n            //                 .catch(error => console.log(error));\n            //                 })\n            //         }\n            //         await teste(user);\n            //     }\n            //     // data.forEach(user => {\n            //     //     teste2(user)\n            //     // })\n            //     return aux;\n            // }\n\n            const wait = async (data) => {\n                let response = [];\n                return new Promise((resolve) => {\n\n                    data.forEach(user => {\n                        useraccess(token, )\n                        .then(userData => {\n                            console.log(userData)\n                        })\n                        .catch(error => console.log(error));\n                    })\n                })\n            }\n\n            if(response.data.length > 0){\n                let data = response.data;\n                let aux = [];\n                data.forEach(user => {\n\n                })\n            } else {\n                return aux;\n            }\n\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token){\n    // eslint-disable-next-line \n    return http.\n        post(\"/getloggedusers/\", {\n            token,\n        })\n        .then(response => {\n            return response.data;\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id){\n    return http.post(\"/getsystemlogsbyuserid/\", {\n        token,\n        id,\n    })\n    .then(response => {return response.data})\n    .catch(error => console.log(error))\n}\n\nconst endpoint = {\n    systemusers,\n    systemlogs,\n    useraccess,\n    infouser,\n};\n\nexport default endpoint;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}