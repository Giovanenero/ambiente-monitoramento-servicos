{"ast":null,"code":"import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token) {\n  return http.post(\"/getuser/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token) {\n  return http.post(\"/getsystemusers/\", {\n    token\n  }).then(response => {\n    let userTimeAction = function (data) {\n      useraccess(token, userId).then(userData => {\n        if (userData.length > 0) {}\n      }).catch(error => console.log(error));\n    };\n    if (response.data) {\n      let data = response.data;\n      //let aux = null;\n      userTimeAction(data);\n      return data;\n    }\n    // if(response.data){\n    //     let teste = async (userId) => {\n    //         return new Promise((resolve) => {\n    //             useraccess(token, userId)\n    //             .then(data => {\n    //                 if(data !== undefined && data.length > 0){\n    //                     console.log(data);\n    //                     let time = DataParse.parseDate(data[0].date);\n    //                     if(time){\n    //                         newAux = {\n    //                             time: time.day + \" às \" + time.hour,\n    //                             action: data.jobType,\n    //                         }\n    //                     }\n    //                 } \n    //                 resolve();\n    //             })\n    //             .catch(error => console.log(error));\n    //         })\n    //     }\n    //     return auxData;\n    // }\n  }).catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token) {\n  // eslint-disable-next-line \n  return http.post(\"/getloggedusers/\", {\n    token\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id) {\n  return http.post(\"/getsystemlogsbyuserid/\", {\n    token,\n    id\n  }).then(response => {\n    return response.data;\n  }).catch(error => console.log(error));\n}\nconst endpoint = {\n  systemusers,\n  systemlogs,\n  useraccess,\n  infouser\n};\nexport default endpoint;","map":{"version":3,"names":["http","DataParse","infouser","token","post","then","response","data","catch","error","console","log","systemusers","userTimeAction","useraccess","userId","userData","length","systemlogs","id","endpoint"],"sources":["/home/lapti/ambiente-monitoramento-servicos/src/endpoint/SystemUsers.jsx"],"sourcesContent":["import http from \"./http-common\";\nimport DataParse from \"../helpers/DataParse\";\n\n//função que retorna as informações do usuário pelo token\nfunction infouser(token){\n    return http\n        .post(\"/getuser/\", {token})\n        .then(response => {return response.data})\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários do sistema\nfunction systemusers(token){\n    return http\n        .post(\"/getsystemusers/\", {\n            token,\n        })\n        .then(response => {\n            let userTimeAction = function(data) {\n\n                useraccess(token, userId)\n                .then(userData => {\n                    if(userData.length > 0){\n                        \n                    }\n                })\n                .catch(error => console.log(error));\n            }\n            if(response.data){\n                let data = response.data;\n                //let aux = null;\n                userTimeAction(data);\n                return data;\n            }\n            // if(response.data){\n            //     let teste = async (userId) => {\n            //         return new Promise((resolve) => {\n            //             useraccess(token, userId)\n            //             .then(data => {\n            //                 if(data !== undefined && data.length > 0){\n            //                     console.log(data);\n            //                     let time = DataParse.parseDate(data[0].date);\n            //                     if(time){\n            //                         newAux = {\n            //                             time: time.day + \" às \" + time.hour,\n            //                             action: data.jobType,\n            //                         }\n            //                     }\n            //                 } \n            //                 resolve();\n            //             })\n            //             .catch(error => console.log(error));\n            //         })\n            //     }\n            //     return auxData;\n            // }\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna todos os usuários online\nfunction systemlogs(token){\n    // eslint-disable-next-line \n    return http.\n        post(\"/getloggedusers/\", {\n            token,\n        })\n        .then(response => {\n            return response.data;\n        })\n        .catch(error => console.log(error));\n}\n\n//função que retorna os registros do sistema de um usuário em específico pelo seu ID\nfunction useraccess(token, id){\n    return http.post(\"/getsystemlogsbyuserid/\", {\n        token,\n        id,\n    })\n    .then(response => {return response.data})\n    .catch(error => console.log(error))\n}\n\nconst endpoint = {\n    systemusers,\n    systemlogs,\n    useraccess,\n    infouser,\n};\n\nexport default endpoint;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,eAAe;AAChC,OAAOC,SAAS,MAAM,sBAAsB;;AAE5C;AACA,SAASC,QAAQ,CAACC,KAAK,EAAC;EACpB,OAAOH,IAAI,CACNI,IAAI,CAAC,WAAW,EAAE;IAACD;EAAK,CAAC,CAAC,CAC1BE,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASG,WAAW,CAACT,KAAK,EAAC;EACvB,OAAOH,IAAI,CACNI,IAAI,CAAC,kBAAkB,EAAE;IACtBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,IAAIO,cAAc,GAAG,UAASN,IAAI,EAAE;MAEhCO,UAAU,CAACX,KAAK,EAAEY,MAAM,CAAC,CACxBV,IAAI,CAACW,QAAQ,IAAI;QACd,IAAGA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAC,CAEvB;MACJ,CAAC,CAAC,CACDT,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IACvC,CAAC;IACD,IAAGH,QAAQ,CAACC,IAAI,EAAC;MACb,IAAIA,IAAI,GAAGD,QAAQ,CAACC,IAAI;MACxB;MACAM,cAAc,CAACN,IAAI,CAAC;MACpB,OAAOA,IAAI;IACf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASS,UAAU,CAACf,KAAK,EAAC;EACtB;EACA,OAAOH,IAAI,CACPI,IAAI,CAAC,kBAAkB,EAAE;IACrBD;EACJ,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;IACd,OAAOA,QAAQ,CAACC,IAAI;EACxB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AAC3C;;AAEA;AACA,SAASK,UAAU,CAACX,KAAK,EAAEgB,EAAE,EAAC;EAC1B,OAAOnB,IAAI,CAACI,IAAI,CAAC,yBAAyB,EAAE;IACxCD,KAAK;IACLgB;EACJ,CAAC,CAAC,CACDd,IAAI,CAACC,QAAQ,IAAI;IAAC,OAAOA,QAAQ,CAACC,IAAI;EAAA,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC;AAEA,MAAMW,QAAQ,GAAG;EACbR,WAAW;EACXM,UAAU;EACVJ,UAAU;EACVZ;AACJ,CAAC;AAED,eAAekB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}