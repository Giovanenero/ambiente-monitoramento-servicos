{"ast":null,"code":"function parseDate(date) {\n  if (typeof date === \"number\") {\n    var dateSeconds = new Date(date * 1000).toString();\n    const arr = dateSeconds.split(' ');\n    let month = arr[1];\n    let day = arr[2];\n    let year = arr[3];\n    let hour = arr[4];\n\n    //remove os segundos\n    // var seconds = hour.lastIndexOf(\":\");\n    // hour = hour.substring(0, seconds);\n\n    switch (month) {\n      case \"Jan\":\n        month = \"01\";\n        break;\n      case \"Feb\":\n        month = \"02\";\n        break;\n      case \"Mar\":\n        month = \"03\";\n        break;\n      case \"Apr\":\n        month = \"04\";\n        break;\n      case \"May\":\n        month = \"05\";\n        break;\n      case \"Jun\":\n        month = \"06\";\n        break;\n      case \"Jul\":\n        month = \"07\";\n        break;\n      case \"Aug\":\n        month = \"08\";\n        break;\n      case \"Sep\":\n        month = \"09\";\n        break;\n      case \"Ouc\":\n        month = \"10\";\n        break;\n      case \"Nov\":\n        month = \"11\";\n        break;\n      default:\n        month = \"12\";\n        break;\n    }\n    return {\n      day: day + \"/\" + month + \"/\" + year,\n      hour: hour\n    };\n  }\n  return null;\n}\nfunction parseMemory(megabyte) {\n  if (typeof megabyte === \"number\") {\n    let memoyGB = megabyte / 1000;\n    return memoyGB.toFixed(2);\n  }\n}\nconst treatTime = date => {\n  let year = date.slice(0, 4);\n  let month = date.slice(5, 7);\n  let day = date.slice(8, 10);\n  let clock = date.slice(11);\n  return {\n    day: day + \"/\" + month + \"/\" + year,\n    clock: clock\n  };\n};\nfunction treatData(data) {\n  if (data !== \"\") {\n    let lines = [];\n    let first = 0;\n    let last = data.indexOf(\"at \");\n    lines.push(data.slice(first, last));\n    first = last + 3;\n    last = data.indexOf(\"at \", first);\n    while (last !== -1) {\n      lines.push(\"at \" + data.slice(first, last));\n      first = last + 3;\n      last = data.indexOf(\"at \", first);\n    }\n    let date = treatTime(lines[0].slice(0, 19));\n    return {\n      lines: lines,\n      day: date.day,\n      clock: date.clock\n    };\n  }\n  return null;\n}\nconst DataParse = {\n  parseDate,\n  parseMemory,\n  treatData\n};\nexport default DataParse;","map":{"version":3,"names":["parseDate","date","dateSeconds","Date","toString","arr","split","month","day","year","hour","parseMemory","megabyte","memoyGB","toFixed","treatTime","slice","clock","treatData","data","lines","first","last","indexOf","push","DataParse"],"sources":["/home/lapti/ambiente-monitoramento-servicos/src/helpers/DataParse.jsx"],"sourcesContent":["function parseDate(date){\n    if(typeof date === \"number\"){\n        var dateSeconds = new Date(date * 1000).toString();\n        const arr = dateSeconds.split(' ');\n        let month = arr[1]\n        let day = arr[2]\n        let year = arr[3]\n        let hour = arr[4]\n        \n        //remove os segundos\n        // var seconds = hour.lastIndexOf(\":\");\n        // hour = hour.substring(0, seconds);\n\n        switch(month){\n            case \"Jan\":\n                month = \"01\";\n                break;\n            case \"Feb\":\n                month = \"02\";\n                break;\n            case \"Mar\":\n                month = \"03\";\n                break;\n            case \"Apr\":\n                month = \"04\";\n                break;\n            case \"May\":\n                month = \"05\";\n                break;\n            case \"Jun\":\n                month = \"06\";\n                break;\n            case \"Jul\":\n                month = \"07\";\n                break;\n            case \"Aug\":\n                month = \"08\";\n                break;\n            case \"Sep\":\n                month = \"09\";\n                break;\n            case \"Ouc\":\n                month = \"10\";\n                break;\n            case \"Nov\":\n                month = \"11\";\n                break\n            default:\n                month = \"12\";\n                break;\n        }\n\n        return {\n            day: day + \"/\" + month + \"/\" + year,\n            hour: hour,\n        }\n    }\n    return null;\n}\n\nfunction parseMemory(megabyte){\n    if(typeof megabyte === \"number\"){\n        let memoyGB = megabyte / 1000;\n        return memoyGB.toFixed(2);\n    }\n}\n\nconst treatTime = (date) => {\n    let year = date.slice(0, 4);\n    let month = date.slice(5, 7);\n    let day = date.slice(8, 10);\n    let clock = date.slice(11);\n    return {\n        day: day + \"/\" + month + \"/\" + year,\n        clock: clock,\n    }\n}\n\nfunction treatData(data){\n    if(data !== \"\"){\n        let lines = [];\n        let first = 0;\n        let last = data.indexOf(\"at \");\n        lines.push(data.slice(first, last));\n        first = last + 3;\n        last = data.indexOf(\"at \", first);\n        while(last !== -1){\n            lines.push(\"at \"+ data.slice(first, last));\n            first = last + 3;\n            last = data.indexOf(\"at \", first);\n        }\n        let date = treatTime(lines[0].slice(0, 19));\n        return {\n            lines: lines,\n            day: date.day,\n            clock: date.clock,\n        }\n    } return null;\n}\n\nconst DataParse = {\n    parseDate,\n    parseMemory,\n    treatData,\n}\n\nexport default DataParse;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}